*****************************************************************************************
** Pending issues:

*** GSON issues:
0.  The new time stamp format does not automatically throw exceptions for non-sensical
    dates. A routine for verifying dates needs to be added to each API that uses dates.

1.  Enum type errors are not caught by Gson.

2.  Boolean errors arn't caught either.
     
3.  Objects that need names no longer errors when a null value is given.

4.  Number format exceptions are also missed.

5.  Null timestamps are unhandled exceptions.

6.  All APIs still use JSONObject to create a response.

7.  Date fields in the model should be updated to Java.time.Instant.

*** API reference issues:
0.  Presently it is not possible to move a Task from one TaskList to another.

1.  Implement a deleteUser method.

2.  The UpdateTaskList API should delete Tasks that are de-referenced. Currently any 
    changes to the taskIds list is just ignored.

*** Miscellaneous issues:
0.  All model objects must implement an addObject(Object) method that ensures that a 
    given reference cannot be placed in the Array of IDs more than once. This needs to
    be tested by the model unit tests as well.
    
1.  An api should be made that verifies a User's object tree is valid.

2.  Models should implement java.time.Instant instead of java.util.Date.    
*****************************************************************************************
Mike likes a program called: http://todotxt.com/

Also, mike says that if something is low priority, but is really short, then the cost of
keeping it on the task list is too expensive to just leave in the task list. Corilary- if 
the cost of making a decission is more than the difference between decisions, then just 
flip a coin.
 
*** Security ***
Use "O"-auth to protect all of out APIs. There exists a philosophy that all get requests 
are open, and everything else ought to be behind a token. This probably sucks for our 
purposes however.

Logins require user name and password. The response is a token, and tokens are required 
for all post, get, delete and put requests.

*****************************************************************************************
**All objects should implement 3(or 4) different functions:
Validation - Verify that an object being added or updated results in a valid object-model
state. In particular, all object fields must be valid, any objects referenced must exist
and that the new object must have permission to access them.

Cleaning - Remove all references to an object already in the repository. This should be 
done without deleteing any objects that can no longer be seen so a recovery attempt can
be made in the event of an update failure.

Updateing - Add references to an object that is being placed in the repository. Before
an update is attempted, validation must be performed to validate the new state. 

Deleting - Users, Tasks, and TaskLists must implement a special procedure for proper 
removal from the repository. That is, they must remove objects that cannot exist in their
absence. For example, deleting a Task requires that reminders are removed since they 
cannot be seen without a Task. Likewise, Users must have all objects they reference
removed with the exception of shared objects.

Calendar       Category       Reminder       Schedule     
  - validate     - validate     - validate     - validate 
  - clean        - clean        - clean        - clean    
  - update       - update       - update       - update   

Task          User          TaskList
  - validate    - validate    - validate
  - clean       - clean       - clean
  - update      - update      - update
  - delete      - delete      - delete

*****************************************************************************************
